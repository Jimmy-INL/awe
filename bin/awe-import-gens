#!/usr/local/opt/python/bin/python2.7

import os, sys

try:
    import tables
except ImportError:
    print "Failed to import the 'tables' python module"
    print "This is required to load the hdf format files that MSMBuilder uses to store the cluster centers"
    print "Please install PyTables before proceeding:"
    print "http://www.pytables.org/moin"
    sys.exit(1)

import numpy as np


def getopts():
    import optparse
    p = optparse.OptionParser()

    p.add_option('-g', '--gens', default='Data/Gens.lh5', help='Path to the cluster generators file [%default]')
    p.add_option('-m', '--mapping', default=None, help='The Mappings.dat generated by BuildMSM.py. If passed, subselect the centers [%default]')
    p.add_option('-o', '--outpath', default='Data/cells.dat', help='Path to output file [%default]')
    p.add_option('-p', '--precision', default=1000., type=float, help='[%default]')

    opts, _ = p.parse_args()
    return opts

def usage():
    print 'USAGE'
    print '    %s <hdf_path> <output_path>' % sys.argv[0]
    print
    print 'DESCRIPTION'
    print "    Convert the cluster definitions from MSMBuilder's HDF storage format to one"
    print "    compatiable with AWE. Please be aware that only MSMBuilder's 'hybrid' clustering"
    print "    algorithm is supported."
    sys.exit(1)


opts = getopts()
hdfile  = opts.gens
txtfile = opts.outpath


F = tables.openFile(hdfile)
coords = F.getNode('/XYZList').read()

### convert from the lossy integer scheme
coords = coords.astype('float32') / opts.precision

### apply the Mapping.dat generated by BuildMSM.py, if applicable
if opts.mapping:
    mapping = np.loadtxt(opts.mapping).astype(int)
    coords = coords[mapping != -1]


### write the output file
ncells, ncoords, dim = coords.shape

with open(txtfile, 'w') as fd:
    fd.write('ncells: '  + str(ncells) + '\n')
    fd.write('ncoords: ' + str(ncoords) + '\n')
    fd.write('ndims: '   + str(dim)    + '\n')
    fd.write('\n')

    np.savetxt(fd, coords.flatten(), fmt='%f')

F.close()
