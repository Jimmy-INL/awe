#!/usr/bin/env python
"""
Extract AWE inputs from an existing MSM and corresponding clustering.

Author: Jeff Kinnison <jkinniso@nd.edu>
"""

import argparse
import copy
import glob
import os
import os.path
import mdtraj
from msmbuilder.dataset import dataset
from msmbuilder.utils import load, draw_samples
import numpy as np


def parse_args(args=None):
    parser = argparse.ArgumentParser()

    parser.add_argument('-n', '--n-samples',
                        required=True,
                        type=int,
                        help='the number of samples to draw from each MSM state'
                        )

    parser.add_argument('-m', '--msm',
                        default='msm.pkl',
                        type=str,
                        help='path to the serialized MSMBuilder msm object'
                        )

    parser.add_argument('-c', '--clustering',
                        default='clustering/',
                        type=str,
                        help='path to the clustered data'
                        )

    parser.add_argument('-C', '--clusterer',
                        default='clusterer.pkl',
                        type=str,
                        help='path to serialized clusterer fit to clustering'
                        )

    parser.add_argument('-i', '--input-trajectories',
                        default='trajectories',
                        type=str,
                        help='path to the input trajectories'
                        )

    parser.add_argument('-t', '--topology',
                        default='input.pdb',
                        type=str,
                        help='path to the trajectory topology file'
                        )

    parser.add_argument('-r', '--reference',
                        default='folded.pdb',
                        type=str,
                        help='path to the reference trajectory'
                        )

    parser.add_argument('-a', '--atom-selection',
                        default='backbone',
                        type=str,
                        help='MDTraj/VMD atom selection string'
                        )

    parser.add_argument('--samples-out',
                        default='samples',
                        type=str,
                        help='path to the cell sampling output directory'
                        )

    parser.add_argument('--centers-out',
                        default='centers',
                        type=str,
                        help='path to the cell centers output directory'
                        )

    parser.add_argument('--folded-assignments',
                        default=['folded.dat', 'unfolded.dat']
                        nargs=2,
                        type=str,
                        help='paths to the cell assignment output files'
                        )

    parser.add_argument('--folded-threshold',
                        default=3.0,
                        type=float,
                        help='RMSD to folded state threshold (AA)'
                        )

    parser.add_argument('--cells-datafile',
                        default='cells.dat',
                        type=str,
                        help='the cell data output file'
                        )

    parser.add_argument('--weights-datafile',
                        default='weights.dat',
                        type=str,
                        help='the cell weights data output file',
                        )

    return parser.parse_args(args)


def save_samples(msm, clustering, xyz, n_samples, samples_dir):
    """

    """
    samples = msm.draw_samples(clustering, n_samples)
    frames = draw_samples.map_drawn_samples(samples, xyz)

    if not os.path.isdir(samples_dir):
        os.mkdir(samples_dir)

    for i in range(0, msm.n_states_):
        for j in range(0, n_samples):
            samples = ''.join(['State', str(i), '-', str(j), '.pdb'])
            frames[i][j].save(os.path.join(samples_dir, sample))


def save_state_centers(msm, clustering, clusterer, xyz, centers_dir):
    """

    """
    centers = clusterer.cluster_centers_
    dists = {}
    centermap = {}

    for i in range(0, len(clustering)):
        for j in range(0, len(clustering[i])):
            try:
                label = clusterer.labels_[i][j]
                center = msm.mapping_[label]
                dist = np.linalg.norm(clustering[i][j] - centers[label])
                if center != -1 and dist < dists[center]:
                    dists[center] = dist
                    centermap[center] = (i, j)
            except KeyError:
                continue

    if not os.path.isdir(centers_dir):
        os.mkdir(centers_dir)

    for key, val in centermap.iteritems():
        fname = ''.join(['Center', str(key), '.pdb'])
        traj = xyz[val[0]].slice([val[1]])
        traj.save(os.path.join(centers_dir, fname))


def save_cell_assignments(centers_dir, reference, threshold, atom_selection,
                          folded_out, unfolded_out, cells_out):
    """

    """
    ref = mdtraj.load(reference)

    n_cells = len(glob.glob(os.path.join(centers_dir, '*.pdb')))

    folded = open(folded_out, 'w')
    unfolded = open(unfolded_out, 'w')
    cells = open(cells_out, 'w')

    cells.write(''.join(['ncells: ', str(n_cells),
                         '\nncoords: ', str(ref.n_atoms),
                         '\nndims: ', str(3), '\n\n']))

    for i in range(0, n_cells):
        fname = ''.join('Center', str(i), '.pdb')
        traj = mdtraj.load(os.path.join(centers_dir, fname))
        rmsd = mdtraj.rmsd(traj, ref,
                           atom_indices=traj.topology.select(atom_selection))
        if rmsd[0] < threshold:
            folded.write(''.join([str(i), '\n']))
        else:
            unfolded.write(''.join([str(j), '\n']))

        for atom in traj.xyz[0]:
            cells.write(''.join([str(atom[0]), '\n',
                                 str(atom[1]), '\n',
                                 str(atom[2]), '\n']))

        folded.close()
        unfolded.close()
        cells.close()


def save_weights(msm, weights_out):
    """

    """
    np.savetxt(weights_out, msm.populations_)


if __name__ == "__main__":
    args = parse_args(None)

    msm = load(args.msm)
    clustering = dataset(args.clustering)
    clusterer = load(args.clusterer)
    xyz = dataset(args.input_trajectories, args.topology)

    save_samples(msm, clustering, xyz, args.n_samples, args.samples_out)
    save_state_centers(msm, clustering, clusterer, xyz, args.centers_out)
    save_weights(msm, args.weights_datafile)
    del msm
    del clustering
    del clusterer
    del xyz
    save_cell_assignments(args.centers_out, args.reference, args.threshold,
                          args.atom_selection, args.folded_assignments[0],
                          args.folded_assignments[1], args.cells_datafile)
