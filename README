Adaptive Weighted Ensemble or AWE package provides a Python library for
adaptive sampling of molecular dynamics. The framework decomposes the
resampling computations and the molecular dynamics simulations into tasks that
are dispatched to Work Queue for distribution and execution across allocated
resources.

REQUIREMENTS
-------------------------------------------------------------------------------
  - Python 2.6 or higher [0]
  - Numpy 1.5 or higher [1]
  - Prody [2]
  - Gromacs 4.5 [3]
  - GNU Scientific Library [4]
  - Gromacs XTC library [5]

  [0] http://python.org/
  [1] http://www.numpy.org/
  [2] http://www.csb.pitt.edu/prody
  [3] http://www.gromacs.org/
  [4] http://www.gnu.org/software/gsl/
  [5] http://www.gromacs.org/Developer_Zone/Programming_Guide/XTC_Library

INSTALLATION
-------------------------------------------------------------------------------
To install AWE, execute the following.
  $ AWE_PREFIX=/path/to/installation
  $ ./configure [--prefix $AWE_PREFIX]
  $ make install

Then add $AWE_PREFIX/bin and $AWE_PREFIX/lib/pythonA.B/site-packages
to your PATH and PYTHONPATH (respectively). The A.B in the PYTHONPATH
path should correspond to the major and minor version numbers of the
python interpreter that was used to install. Common values are 2.6 or 2.7.

You can check your installation of AWE by running:
  $ awe-verify

RUNNING  
-------------------------------------------------------------------------------

Start by executing
  $ awe-prepare

This instantiates a runnable AWE example in the current
directory. There are two main input directories: awe-generic-data and
awe-instance-data.

The former contains files that all AWE runs will require (namely the
binaries and Gromacs forcefield files).

The latter contains files that are particular to a protein system. The
includes the state definitions, initial protein coordinates, and so
forth.

Finally, there is now an example.py file is the main entry point to
running AWE.

Cutomization of AWE can be done by modifying the files in
awe-instance-data and the example.py


In order to run the example, you may execute:
  $ python example.py

You will see this right away:
  Running on port 9123...
  Loading cells and walkers
 
The master program successfully started and is loading the cells and walkers
for running the simulations.

Note the master by default assigns a unique project name by subsituting
YOURUSERNAME with the username that invoked the master. For example, if the
username that invoked the example is jdoe, the default project name will be:
awe-jdoe

The master then waits for workers to connect so it can dispatch the simulations
tasks for execution by the connected workers.  

To start a worker for this master, use the 'work_queue_worker' command.  The
format is: work_queue_worker <master hostname> <port>.  In our case, both
master and worker(s) run on the localhost, and the port here (see above) is
9123: 
$ work_queue_worker localhost 9123

ANALYSIS
-------------------------------------------------------------------------------
After running the example, a Ramachandran plot (free energy landscape
on phi-psi space) can be generated according to AWE output
"resample/cell-weights.csv" with the following command.

  $ python awe-rama-ala.py \
        -w <project dir>/resample/cell-weights.csv \
        -p <projectdir>/testinput/state0.pdb \
        -c <project dir>/testinput/cells.dat -n 100

The options are:
-w: csv file recording cell weights (cell-weights.csv)
-p: structure file of simulation target (.pdb)
-c: data file recording coordinates of cell centers 
-n: number of cells

Output:
awe-rama-ala.png: Ramachandran plot

To generate and visualize forward and backward fluxes from AWE output
"transitions.dat", run script awe-flux.py.

  $ python awe-flux.py -i <project dir>/transitions.dat -l 0.01 -o flux 

The options are:
-i: data file recording transitions at every iteration (transitions.dat)
-l: scale iteration length to actual unit (micro-/nano-/pico-/femto- seconds)
-o: output directory 

Output:
<output dir>/instan-forward-flux.dat: instantaneous forward flux
<output dir>/instan-backward-flux.dat: instantaneous backward flux
<output dir>/forward-flux.png: plot of forward flux
<output dir>/backward-flux.png: plot of backward flux

To generate transition probability matrix from AWE output, run script awe-transMatrix.py

  $ python awe-transMatrix.py -p <project dir>/resample/walker-history.dat 
        -w <project dir>/resample/walker-weights.dat
        -t 1 -n 100

The options are:
-p: data file recording dependencies of walkers (resample/walker-history.csv)
-w: data file recording weights and cell ID of walkers (resample/walker-weights.csv) 
-t: time lag (number of iterations) for calculating transition matrix
-n: number of cells 
-o: output file name
-s: specify the nth iteration, start from which transition matrix is built

Output:
trans.csv: transition probability matrix

INPUTS
-------------------------------------------------------------------------------

  AWE consists of three components:
    1) short MD (walkers)
    2) assignment of walkers to cells (assign)
    3) adjust the weights of the walkers (resample).

  A protocol for running AWE should consist of the following
    1) State partitioning into C cells
    2) Walker initialization: W walkers should start from each cell, with associated weight
    3) Run AWE using a resampling algorithm for several iterations.

  Steps performed on the Master:
    * Walker initialization
    * resampling

  Steps performed on the Worker:
    * Molecular Dynamics
    * Assignment

  The master therefore transfers to workers the required files for MD
  (Gromacs binaries and associated topology files) and the cell
  definitions. The worker returns the assignment of the final MD
  conformation to the cell definitions.


CONTRIBUTERS
-------------------------------------------------------------------------------
  Please see the AUTHORS file.
