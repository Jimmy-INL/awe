Adaptive Weighted Ensemble or AWE package provides a Python library for
adaptive sampling of molecular dynamics. The framework decomposes the
resampling computations and the molecular dynamics simulations into tasks that
are dispatched to Work Queue for distribution and execution across allocated
resources.

REQUIREMENTS
-------------------------------------------------------------------------------
  - Python 2.6 or higher
  - Numpy 1.5 or higher 
  - Prody 0.9.4
  - Gromacs 4.5

INSTALLATION
-------------------------------------------------------------------------------
To install AWE, execute the following.
  $ python setup.py install --prefix <path/to/installation/directory>

In order to run AWE

  1) Ensure that Numpy and Prody are installed and
     that Python can find them. For instance, adding the python modules to
     the PYTHONPATH environment variable:
       # make sure numpy and prody are usable
       $ export PYTHONPATH=/opt/numpy/1.6.1/lib/python2.7/site-packages:$PYTHONPATH
       $ export PYTHONPATH=/opt/prody/1.3/lib/python2.7/site-packages:$PYTHONPATH
  2) Make sure that Gromacs is installed

RUNNING  
-------------------------------------------------------------------------------

In order to run the example, AWE will need to know where the Gromacs
binaries pdb2gmx, grompp, and mdrun, as well as the topology files are
located. A script (awe-prepare-gromacs) is provided that copies the
required files into a directory ('awesetup' by default).

  $ awe-prepare-gromacs


The example program, example.py, is a Work Queue master application
runs the awe sampling algorithm on the Alanine DiPeptide molecule. To
run this example: 

  $ python example.py

You will see this right away:
  Running on port 9123...
  Loading cells and walkers
 
The master program successfully started and is loading the cells and walkers
for running the simulations.

Note the master by default assigns a unique project name by subsituting
YOURUSERNAME with the username that invoked the master. For example, if the
username that invoked the example is jdoe, the default project name will be:
awe-jdoe

The master then waits for workers to connect so it can dispatch the simulations
tasks for execution by the connected workers.  

To start a worker for this master, use the 'work_queue_worker' command.  The
format is: work_queue_worker <master hostname> <port>.  In our case, both
master and worker(s) run on the localhost, and the port here (see above) is
9123: 
$ work_queue_worker localhost 9123

INPUTS
-------------------------------------------------------------------------------

  AWE consists of three components:
    1) short MD (walkers)
    2) assignment of walkers to cells (assign)
    3) adjust the weights of the walkers (resample).

  A protocol for running AWE should consist of the following
    1) State partitioning into C cells
    2) Walker initialization: W walkers should start from each cell, with associated weight
    3) Run AWE using a resampling algorithm for several iterations.

  Steps performed on the Master:
    * Walker initialization
    * resampling

  Steps performed on the Worker:
    * Molecular Dynamics
    * Assignment

  The master therefore transfers to workers the required files for MD
  (Gromacs binaries and associated topology files) and the cell
  definitions. The worker returns the assignment of the final MD
  conformation to the cell definitions.


CONTRIBUTERS
-------------------------------------------------------------------------------
  Please see the AUTHORS file.
