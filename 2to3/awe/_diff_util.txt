--- util.py	(original)
+++ util.py	(refactored)
@@ -29,7 +29,7 @@
     def typecheck(self, value, expected, name='', arg=-1):
         typ = type(value)
         if typ is not expected:
-             raise TypeException, '%s expected: %s, but got: %s' % (name or 'param %s' % arg, expected, typ)
+             raise TypeException('%s expected: %s, but got: %s' % (name or 'param %s' % arg, expected, typ))
 
     def __call__(self, fn):
         def wrapped(*args, **kws):
@@ -42,19 +42,19 @@
                     self.typecheck(v, t, arg=i)
                 del i
 
-                for n, e in self.kws.iteritems():
+                for n, e in self.kws.items():
                     if n in kws:
                         self.typecheck(kws[n], e, name=n)
-            except TypeException, ex:
+            except TypeException as ex:
                 stack = traceback.extract_stack()
                 stack = ''.join(traceback.format_list(stack[:-1]))
                 stack = '\n\t'.join(('\t' + stack).split('\n'))
-                raise TypeException, '%s:\n\n%s\n\t%s' % (fn, stack, ex)
+                raise TypeException('%s:\n\n%s\n\t%s' % (fn, stack, ex))
 
             return fn(*args,**kws)
 
-        wrapped.func_name = fn.func_name
-        wrapped.func_doc = fn.func_doc
+        wrapped.__name__ = fn.__name__
+        wrapped.__doc__ = fn.__doc__
         return wrapped
 
 class returns(object):
@@ -77,11 +77,11 @@
                 stack = traceback.extract_stack()
                 stack = ''.join(traceback.format_list(stack[:-1]))
                 stack = '\n\t'.join(('\t' + stack).split('\n'))
-                raise TypeError, 'Result of %s(*%s, **%s) should be %s but is %s' % \
-                    (fn, args, kws, self.expected, type(result))
+                raise TypeError('Result of %s(*%s, **%s) should be %s but is %s' % \
+                    (fn, args, kws, self.expected, type(result)))
 
-        wrapped.func_name = fn.func_name
-        wrapped.func_doc = '%s -> %s\n\n%s' % (fn.func_name, self.expected, fn.func_doc or '')
+        wrapped.__name__ = fn.__name__
+        wrapped.__doc__ = '%s -> %s\n\n%s' % (fn.__name__, self.expected, fn.__doc__ or '')
         return wrapped
 
 
@@ -99,17 +99,17 @@
 
 def deprecated(fn):
     def wrapped(*args, **kws):
-        print 'WARNING: call to deprecated function: %s' % fn.func_name
+        print('WARNING: call to deprecated function: %s' % fn.__name__)
         return fn(*args, **kws)
-    wrapped.func_name = fn.func_name
-    wrapped.func_doc  = fn.func_doc
+    wrapped.__name__ = fn.__name__
+    wrapped.__doc__  = fn.__doc__
     return wrapped
 
 
 
 
 def checkpicklable(d):
-    for v in d.itervalues():
+    for v in d.values():
         try:
             slots = v.__slots__
             hasslots = True
@@ -122,7 +122,7 @@
             hasgetstate = False
 
         if hasslots and not hasgetstate:
-            print type(v), 'has slots but not __getstate__'
+            print(type(v), 'has slots but not __getstate__')
 
         try:
             d2 = d.__dict__
